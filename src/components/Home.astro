---
import { name } from '../data/config.json';
const { PUBLIC_API_WEATHER_KEY, PUBLIC_CITY } = import.meta.env;
const fetchedWeather = await fetch(
  `https://api.openweathermap.org/data/2.5/weather?q=${PUBLIC_CITY}&APPID=${PUBLIC_API_WEATHER_KEY}&units=metric`
);
const weather = await fetchedWeather.json();

const fetchedQuote = await fetch("https://api.quotable.io/random");
const quote = await fetchedQuote.json();
---
<div class="wrapper">
  <div class="grid">
    <div class="profile unselectable">
      <div class="icon">
        <img src="./assets/icons/avatar.png" alt="avatar">
      </div>
      <div class="text">Good Day! <b>{name}</b>.</div>
    </div>
    <div class="weather ignore-default ignore-hover">
      <div class="status unselectable">
        <div class="desc">{weather?.weather[0]?.main}</div>
      </div>
      <div class="city unselectable">
        <div class="desc">{weather?.name}</div>
      </div>
      <div class="temp">
        <div class="desc">{Math.floor(weather.main.temp)}&deg;C</div>
        <div class="sub">feels like {weather.main.feels_like}&deg;C</div>
      </div>
    </div>
    <div class="time">
      <div class="time-string">{
        (new Date())
          .toLocaleTimeString()
          .toUpperCase()
          .split(":")
          .map((v, i) => `<span style='color:${['#284F8F', '#B22B27', '#EFD033'][i]};'>${v}</span>`)
          .join(" : ")
      }</div>
    </div>
    <div class="quote ignore-default">
      <div class="content">"{quote.content}"</div>
      <div class="author">- {quote.author}</div>
    </div>
    <div class="shortcuts ignore-default ignore-hover">
      <a href="https://discord.com/developers" class="item"><img src="/assets/icons/discord.png"></a>
      <a href="https://gmail.com" class="item"><img src="/assets/icons/gmail.png"></a>
      <a href="https://facebook.com" class="item"><img src="/assets/icons/facebook.png"></a>
      <a href="https://github.com" class="item"><img src="/assets/icons/github.png"></a>
      <a href="https://reddit.com" class="item"><img src="/assets/icons/reddit.png"></a>
    </div>
  </div>
</div>
<style>
  .wrapper {
    position: absolute;
    bottom: 0;
    height: calc(100vh - 3.5rem);
    width: 100vw;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 3rem 5rem 3rem 5rem;
  }
  .grid {
    width: 100%;
    height: 100%;
    display: grid;
    gap: .2rem;
    grid-template-rows: 1.2fr 1.2fr 1.1fr;
    grid-template-columns: 2fr 1fr 1fr 1fr 2fr;
    grid-template-areas: 
      "profile weather weather weather quote"
      "profile time time time quote"
      "profile shortcuts shortcuts shortcuts shortcuts";
  }
  .grid > * {
    border-radius: .3rem;
    transition: all 100ms ease-in-out;
  }
  .grid > *:not(.ignore-default) {
    background-color: rgba(0, 0, 0, 0.7);
    padding: 1.5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
  }

  .grid > *:not(.ignore-hover):hover {
    margin: .5rem;
    border-radius: .5rem;
  }

  .profile {
    grid-area: profile;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .profile > .icon > img {
    width: 10rem;
    height: 10rem;
    border-radius: 50%;
  }
  .profile > .text {
    font-size: 1.7rem;
    white-space: nowrap;
  }
  .profile > .text > b {
    color: #B22B27;
  }

  .time {
    grid-area: time;
  }
  .time > .time-string {
    font-size: 2rem;
    font-family: Verdana, sans-serif;
  }
  .quote {
    grid-area: quote;
    background-color: rgba(0, 0, 0, 0.7);
    padding: 3ch;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    gap: 1rem;
  }
  .quote > .content {
    text-align: center;
  }
  .quote > .content {
    font-size: 1.5rem;
    font-style: italic;
  }
  .weather {
    grid-area: weather;
    display: grid;
    justify-content: stretch;
    align-items: stretch;
    gap: .2rem;
    grid-template-areas: 
      "status temp"
      "city city";
  }
  .weather > * {
    border-radius: .2rem;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
  }

  .weather > *:hover {
    margin: .1rem;
  }

  .status {
    grid-area: status;
    font-family: Arial, Helvetica;
    font-weight: lighter;
    font-variant: small-caps;
    font-size: 0.9rem;
  }
  .temp {
    grid-area: temp;
  }
  .temp > .desc {
    font-size: 1.2rem;
    font-weight: bolder;
    color: #284F8F;
  }
  .temp > .sub {
    font-family: cursive;
    font-size: 0.7rem;
    font-weight: lighter;
  }
  .city {
    grid-area: city;
    font-size: 1.5rem;
    color: #284F8F;
  }
  .shortcuts {
    grid-area: shortcuts;
    display: flex;
    gap: .3rem;
    padding: 0 !important;
  }
  .shortcuts > a {
    background-color: rgba(0, 0, 0, 0.7);
    border-radius: .3rem;
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: all 100ms ease-in-out;
  }
  .shortcuts > a:hover {
    margin: .2rem;
  }
  .shortcuts > a > img {
    height: 6rem;
    width: 6rem;
  }

  @media screen and (max-width: 900px) {
    .wrapper {
      padding: 1rem;
    }
    .grid {
      padding: 0;
      overflow-y: visible;
      grid-template-columns: 2fr 2fr 1fr;
      grid-template-rows: 4fr 2fr 3fr;
      grid-template-areas: 
        "profile profile profile"
        "time time shortcuts"
        "quote quote shortcuts"
    }
    .profile > .text {
      font-size: 1.3rem;
    }
    .profile > .icon > img {
      height: 7rem;
      width: 7rem;
    }
    .time > .time-string {
      font-size: 1.3rem;
    }
    .grid > *:not(.ignore-hover):hover {
      margin: 0.1rem;
    }
    .weather { 
      display: none;
    }
    .quote > .content {
      font-size: 1rem;
    }
    .quote > .author {
      font-size: 0.8rem;
    }
    .shortcuts {
      flex-direction: column;
    }
    .shortcuts > a > img {
      height: 3rem;
      width: 3rem;
    }
  }
</style>
<script>

  function updateTimeString() {
    const now = new Date();
    const timeStringElement = document.querySelector('.time-string');
    const slice = now.toLocaleTimeString().toUpperCase().split(":");
    const colors = ['#284F8F', '#B22B27', '#EFD033'];

    timeStringElement.innerHTML = slice
      .map((v, i) => `<span style='color:${colors[i]};'>${v}</span>`)
      .join(" : ");
  }
  setInterval(updateTimeString, 1000);
</script>